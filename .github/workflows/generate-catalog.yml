name: Generate Coffee Catalog

on:
  issues:
    types: [opened, edited, labeled, unlabeled, reopened, closed]

permissions:
  contents: write
  issues: read

jobs:
  generate-catalog:
    runs-on: ubuntu-latest
    if: (contains(github.event.issue.labels.*.name, 'cafe') || (github.event.action == 'unlabeled' && github.event.label.name == 'cafe')) && github.actor == 'soker90'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Generate cafes.json from issues
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Función para extraer información del issue
          function parseIssueBody(body) {
            const coffee = {
              name: null,
              origin: null,
              region: null,
              roaster: null,
              price: null,
              rating: null,
              purchaseDate: null,
              process: null,
              variety: null,
              altitude: null,
              flavorNotes: [],
              packageImage: null,
              notes: null
            };
            
            if (!body) return coffee;
            
            // Parsing de formulario de GitHub - usando campos del form template
            const formPatterns = {
              name: /### Nombre del Café\s*\n\s*(.+)/i,
              origin: /### Origen \(País\)\s*\n\s*(.+)/i,
              region: /### Región\s*\n\s*(.+)/i,
              roaster: /### Tostador\s*\n\s*(.+)/i,
              price: /### Precio\s*\n\s*([0-9.,]+)/i,
              rating: /### Puntuación\s*\n\s*([1-5])/i,
              purchaseDate: /### Fecha de Compra\s*\n\s*(\d{4}-\d{2}-\d{2})/i,
              process: /### Proceso\s*\n\s*(.+)/i,
              variety: /### Variedad\s*\n\s*(.+)/i,
              altitude: /### Altitud\s*\n\s*([0-9]+)/i,
              flavorNotes: /### Notas de Sabor\s*\n\s*(.+)/i,
              notes: /### Notas Adicionales\s*\n\s*([\s\S]*?)(?=###|$)/i
            };
            
            // Procesar cada campo del formulario
            for (const [key, pattern] of Object.entries(formPatterns)) {
              const match = body.match(pattern);
              if (match && match[1] && match[1].trim() !== '_No response_' && match[1].trim() !== '') {
                let value = match[1].trim();
                
                // Procesar valores específicos según el tipo
                if (key === 'price') {
                  value = parseFloat(value.replace(',', '.'));
                } else if (key === 'rating') {
                  value = parseInt(value);
                } else if (key === 'altitude') {
                  value = parseInt(value);
                } else if (key === 'flavorNotes') {
                  // Convertir lista separada por comas en array
                  value = value.split(',').map(note => note.trim()).filter(note => note.length > 0);
                } else if (key === 'notes') {
                  // Limpiar saltos de línea extra y espacios
                  value = value.replace(/\n+/g, ' ').trim();
                }
                
                coffee[key] = value;
              }
            }
            
            // Extraer imagen subida en el issue
            const imagePattern = /!\[.*?\]\((https:\/\/[^)]+)\)/i;
            const imageMatch = body.match(imagePattern);
            if (imageMatch) {
              coffee.packageImage = imageMatch[1];
            }            return coffee;
          }
          
          try {
            console.log(`Triggered by action: ${context.payload.action}`);
            if (context.payload.issue) {
              console.log(`Processing issue #${context.payload.issue.number}: ${context.payload.issue.title}`);
            }
            
            // Obtener todos los issues (abiertos y cerrados) con label 'cafe'
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'cafe',
              state: 'all',
              per_page: 100
            });
            
            console.log(`Found ${issues.length} coffee issues (including closed)`);
            
            // Convertir issues a cafés
            const coffees = issues.map(issue => {
              console.log(`Processing issue #${issue.number}: ${issue.title}`);
              const coffee = parseIssueBody(issue.body);
              coffee.issueNumber = issue.number;
              coffee.issueTitle = issue.title;
              coffee.createdAt = issue.created_at;
              coffee.updatedAt = issue.updated_at;
              coffee.state = issue.state; // open | closed
              
              // Si no hay nombre, usar el título del issue
              if (!coffee.name) {
                coffee.name = issue.title;
              }
              
              return coffee;
            }).filter(coffee => {
              if (!coffee.name) {
                console.log(`Filtering out coffee without name from issue #${coffee.issueNumber}`);
                return false;
              }
              return true;
            });
            
            // Ordenar por fecha de creación (más recientes primero)
            coffees.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
            
            // Escribir archivo JSON
            const jsonContent = JSON.stringify(coffees, null, 2);
            fs.writeFileSync('cafes.json', jsonContent);
            
            console.log(`Generated cafes.json with ${coffees.length} coffees`);
            console.log('Coffees:', coffees.map(c => `${c.name} (Issue #${c.issueNumber})`));
            
          } catch (error) {
            console.error('Error generating catalog:', error);
            console.error('Error details:', error.message);
            process.exit(1);
          }
          
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add cafes.json
        if git diff --staged --quiet; then
          echo "No changes to commit to cafes.json"
        else
            COMMIT_MSG="Update coffee catalog from issues"
          if [ "${{ github.event.action }}" = "opened" ]; then
            COMMIT_MSG="Add new coffee: ${{ github.event.issue.title }} (Issue #${{ github.event.issue.number }})"
          elif [ "${{ github.event.action }}" = "edited" ]; then
            COMMIT_MSG="Update coffee: ${{ github.event.issue.title }} (Issue #${{ github.event.issue.number }})"
          elif [ "${{ github.event.action }}" = "closed" ]; then
            COMMIT_MSG="Close coffee (kept in catalog): ${{ github.event.issue.title }} (Issue #${{ github.event.issue.number }})"
          elif [ "${{ github.event.action }}" = "unlabeled" ]; then
            COMMIT_MSG="Remove coffee from catalog (Issue #${{ github.event.issue.number }})"
          fi
          git commit -m "$COMMIT_MSG"
          git push
        fi